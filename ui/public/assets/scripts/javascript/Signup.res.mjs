// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Meta from "./Meta.res.mjs";
import * as Browser from "./Browser.res.mjs";
import * as FormBuilder from "./FormBuilder.res.mjs";
import * as Core__Option from "@rescript/core/src/Core__Option.res.mjs";
import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";

async function populate_form() {
  var main = Browser.getElementByTag("main", "Signup.main");
  Browser.clearChildren(main);
  var fields = [
    {
      id: "email",
      type: "email",
      label: "Email:"
    },
    {
      id: "password",
      type: "password",
      label: "Senha:"
    }
  ];
  var header = Browser.makeElement("h2");
  header.innerText = "Criar conta";
  main.appendChild(header);
  var signup_form = await FormBuilder.make_form(fields, "signup_form");
  main.appendChild(signup_form);
}

async function signup_handler($$event) {
  $$event.preventDefault();
  var dialog = Browser.getElement("user_dialog", "Signup.dialog");
  var signup_form = Browser.getElement("signup_form", "Signup.signup_form");
  dialog.innerText = "";
  var form_data = Object.fromEntries(new FormData(signup_form));
  var post_options = {
    method: "POST",
    headers: {
      "Content-Type": "application/json"
    },
    body: JSON.stringify(form_data)
  };
  var response_store = {};
  try {
    var response = await globalThis.fetch(Meta.schema.system.endpoints.signup, post_options);
    response_store.response = await response.clone();
    response_store.json = await response.json();
    console.log(response_store.response);
    console.log(response_store.json);
  }
  catch (raw_error){
    var error = Caml_js_exceptions.internalToOCamlException(raw_error);
    console.log(error);
    dialog.innerText = "Erro na requisição";
  }
  try {
    var response$1 = response_store.response;
    var response$2 = response$1 !== undefined ? response$1 : ({
          __client_error: ""
        });
    var status = Core__Option.getExn(response$2.status, "[Signup.status] Destructuring error");
    var exit = 0;
    if (status >= 202) {
      switch (status) {
        case 400 :
        case 403 :
            dialog.innerText = "Requisição inválida. Os dados informados estão corretos?";
            return ;
        case 409 :
            dialog.innerText = "Já existe uma conta com este email";
            return ;
        default:
          exit = 1;
      }
    } else {
      if (status >= 200) {
        var json = Core__Option.getExn(response_store.json, "[Signup.json] Destructuring error");
        var email = Core__Option.getExn(json.email, "[Signup.email] Destructuring error");
        var token = Core__Option.getExn(json.token, "[Signup.token] Destructuring error");
        var credentials = {
          email: email,
          token: token
        };
        var credentials_stringified = Core__Option.getExn(JSON.stringify(credentials), undefined);
        Browser.store(Meta.schema.system.constants.storage_key, credentials_stringified);
        dialog.innerText = "Conta criada com sucesso";
        console.log(JSON.stringify(Browser.retrieve(Meta.schema.system.constants.storage_key)));
        return ;
      }
      exit = 1;
    }
    if (exit === 1) {
      console.log("Unexpected return status " + status.toString());
      return ;
    }
    
  }
  catch (raw_error$1){
    var error$1 = Caml_js_exceptions.internalToOCamlException(raw_error$1);
    console.log(error$1);
    dialog.innerText = "Erro ao processar resposta";
    return ;
  }
}

async function structure(param) {
  await populate_form();
  return Browser.submitListen(Browser.getElement("signup_form", "Signup.addSubmitListener"), signup_handler);
}

export {
  populate_form ,
  signup_handler ,
  structure ,
}
/* No side effect */
