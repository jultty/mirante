// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Meta from "./Meta.res.mjs";
import * as Browser from "./Browser.res.mjs";
import * as Core__Option from "@rescript/core/src/Core__Option.res.mjs";

function populate_form() {
  var main = Browser.getElementByTag("main", "Login.main");
  Browser.clearChildren(main);
  var fields = [
    {
      id: "email",
      kind: "email",
      label: "Email:"
    },
    {
      id: "password",
      kind: "password",
      label: "Senha:"
    }
  ];
  var login_form = Browser.FormBuilder.make_form(fields, "login_form");
  main.appendChild(login_form);
}

async function login_handler($$event) {
  $$event.preventDefault();
  var dialog = Browser.getElement("user_dialog", "Login.dialog");
  var login_form = Browser.getElement("login_form", "Login.login_form");
  dialog.innerText = "";
  var form_data = Object.fromEntries(new FormData(login_form));
  var post_options = {
    method: "POST",
    headers: {
      "Content-Type": "application/json"
    },
    body: JSON.stringify(form_data)
  };
  var response_store = {};
  try {
    var response = await globalThis.fetch(Meta.endpoints.login, post_options);
    response_store.response = await response.clone();
    response_store.json = await response.json();
  }
  catch (exn){
    console.log({
          TAG: "Error",
          _0: "Erro na requisição"
        });
    dialog.innerText = "Erro na requisição";
  }
  try {
    var response$1 = response_store.response;
    var response$2 = response$1 !== undefined ? response$1 : ({
          __client_error: ""
        });
    var status = Core__Option.getExn(response$2.status, "[Login.status] Destructuring error");
    var exit = 0;
    if (status > 403 || status < 400) {
      if (status === 201 || status === 200) {
        var json = Core__Option.getExn(response_store.json, "[Login.json] Destructuring error");
        var token = Core__Option.getExn(json.token, "[Login.token] Destructuring error");
        var credentials_email = form_data.email;
        var credentials = {
          email: credentials_email,
          token: token
        };
        var credentials_stringified = Core__Option.getExn(JSON.stringify(credentials), undefined);
        sessionStorage.setItem(Meta.constants.storage_key, credentials_stringified);
        dialog.innerText = "Login realizado com sucesso";
        console.log(JSON.stringify(sessionStorage.getItem(Meta.constants.storage_key)));
        return ;
      }
      exit = 1;
    } else {
      if (!(status === 402 || status === 401)) {
        dialog.innerText = "Requisição inválida. Os dados informados estão corretos?";
        return ;
      }
      exit = 1;
    }
    if (exit === 1) {
      console.log("Unexpected return status " + status.toString());
      return ;
    }
    
  }
  catch (exn$1){
    console.log({
          TAG: "Error",
          _0: "Erro ao processar resposta"
        });
    dialog.innerText = "Erro ao processar resposta";
    return ;
  }
}

function structure() {
  populate_form();
  Browser.getElement("login_form", "Login.addSubmitListener").addEventListener("submit", login_handler);
}

export {
  populate_form ,
  login_handler ,
  structure ,
}
/* No side effect */
