// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Auth from "./Auth.res.mjs";
import * as Meta from "./Meta.res.mjs";
import * as Browser from "./Browser.res.mjs";
import * as Core__Option from "@rescript/core/src/Core__Option.res.mjs";
import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";

async function make_set_selector() {
  var get_options = Auth.make_get_options();
  var related = await globalThis.fetch(Meta.schema.system.constants.root_url + "/" + Meta.schema.entity.exercise_set.slug, get_options);
  var array = await related.json();
  var select = Browser.makeElement("select");
  select.id = "set_selector";
  select.name = "set_selector";
  var empty_option = Browser.makeElement("option");
  empty_option.value = "placeholder";
  empty_option.innerText = "Selecione um conjunto de exercícios";
  select.appendChild(empty_option);
  array.forEach(function (set) {
        var option = Browser.makeElement("option");
        option.value = set.id;
        option.innerText = set.name;
        select.appendChild(option);
      });
  return select;
}

async function submit_handler($$event) {
  $$event.preventDefault();
  var dialog = Browser.getElement("user_dialog", "Responder.dialog");
  var response_form = Browser.getElement("response_form", "Responder.submit_handler");
  dialog.innerText = "";
  var form_data = Object.fromEntries(new FormData(response_form));
  console.log(form_data);
  var token = Auth.getCredentials().token;
  var post_options = {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      Authorization: "Bearer " + token
    },
    body: JSON.stringify(form_data)
  };
  var response_store = {};
  try {
    var response = await globalThis.fetch(Meta.make_endpoint(Meta.schema.entity.response), post_options);
    response_store.response = await response.clone();
    response_store.json = await response.json();
    console.log(response_store.response);
    console.log(response_store.json);
  }
  catch (raw_error){
    var error = Caml_js_exceptions.internalToOCamlException(raw_error);
    console.log(error);
    dialog.innerText = "Erro na requisição";
  }
  try {
    var response$1 = response_store.response;
    var response$2 = response$1 !== undefined ? response$1 : ({
          __client_error: ""
        });
    var status = Core__Option.getExn(response$2.status, "[Responder.status] Destructuring error");
    var exit = 0;
    if (status > 403 || status < 400) {
      if (status === 201 || status === 200) {
        dialog.innerText = "Respostas enviadas com sucesso";
        return ;
      }
      exit = 1;
    } else {
      if (!(status === 402 || status === 401)) {
        dialog.innerText = "Requisição inválida. Os dados informados estão corretos?";
        return ;
      }
      exit = 1;
    }
    if (exit === 1) {
      console.log("Unexpected return status " + status.toString());
      return ;
    }
    
  }
  catch (raw_error$1){
    var error$1 = Caml_js_exceptions.internalToOCamlException(raw_error$1);
    console.log(error$1);
    dialog.innerText = "Erro ao processar resposta";
    return ;
  }
}

async function populate_form(id) {
  var old_form = Browser.getElement("response_form", "Responder.structure");
  var new_form = Browser.makeElement("form");
  new_form.id = "response_form";
  new_form.action = Meta.schema.system.constants.root_url + "/" + Meta.schema.entity.response.slug;
  new_form.method = "POST";
  var get_options = Auth.make_get_options();
  var url = Meta.schema.system.constants.root_url + "/" + Meta.schema.entity.exercise.slug + ("?set=eq." + id);
  var related = await globalThis.fetch(url, get_options);
  var exercises = await related.json();
  console.log(exercises);
  for(var i = 0 ,i_finish = exercises.length; i < i_finish; ++i){
    var exercise = Core__Option.getExn(exercises[i], "[Responder.populate_form] Could not find exercise on id " + String(i));
    var fieldset = Browser.makeElement("fieldset");
    var legend = Browser.makeElement("legend");
    legend.innerText = Core__Option.getExn(exercise.instruction, "[Responder.submit_handler] Exercise with database id " + exercise.id + " does not have an instruction");
    fieldset.appendChild(legend);
    var url$1 = Meta.schema.system.constants.root_url + "/" + Meta.schema.entity.option.slug + ("?exercise=eq." + exercise.id);
    var related$1 = await globalThis.fetch(url$1, get_options);
    var options = await related$1.json();
    console.log(options);
    for(var i$1 = 0 ,i_finish$1 = options.length; i$1 < i_finish$1; ++i$1){
      var option = Core__Option.getExn(options[i$1], "[Responder.populate_form] Could not find option on id " + String(i$1));
      var id$1 = "exercise_" + exercise.id + "_option_" + option.id;
      var radio_wrapper = Browser.makeElement("p");
      var input = Browser.makeElement("input");
      input.type = "radio";
      input.value = id$1;
      input.id = id$1;
      var label = Browser.makeElement("label");
      label.innerText = Core__Option.getExn(option.content, "[Responder.submit_handler] Option with database id " + option.id + " does not have content");
      label.for = id$1;
      radio_wrapper.appendChild(input);
      radio_wrapper.appendChild(label);
      fieldset.appendChild(radio_wrapper);
    }
    new_form.appendChild(fieldset);
  }
  var button = Browser.makeElement("input");
  button.type = "submit";
  button.value = "Enviar";
  new_form.appendChild(button);
  old_form.replaceWith(new_form);
  return Browser.submitListen(Browser.getElement("response_form", "Responder.structure"), submit_handler);
}

async function set_selection_handler(param) {
  var selector = Browser.getElement("set_selector", "Responder.set_selection_handler");
  return await populate_form(Core__Option.getExn(selector.value, undefined));
}

async function structure(param) {
  var main = Browser.getElementByTag("main", "Responder.structure");
  Browser.clearChildren(main);
  var header = Browser.makeElement("h2");
  header.innerText = "Responder exercícios";
  main.appendChild(header);
  var set_selector = await make_set_selector();
  var form = Browser.makeElement("form");
  form.id = "response_form";
  main.appendChild(set_selector);
  main.appendChild(form);
  return Browser.changeListen(Browser.getElement("set_selector", "Responder.structure"), set_selection_handler);
}

export {
  make_set_selector ,
  submit_handler ,
  populate_form ,
  set_selection_handler ,
  structure ,
}
/* No side effect */
